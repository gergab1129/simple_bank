// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package db

import (
	"context"
)

const addBalance = `-- name: AddBalance :one
UPDATE accounts SET balance =  balance + $1
WHERE account_id = $2
RETURNING account_id, owner, balance, currency, created_at
`

type AddBalanceParams struct {
	Amount    int64 `json:"amount"`
	AccountID int64 `json:"account_id"`
}

func (q *Queries) AddBalance(ctx context.Context, arg AddBalanceParams) (Accounts, error) {
	row := q.db.QueryRow(ctx, addBalance, arg.Amount, arg.AccountID)
	var i Accounts
	err := row.Scan(
		&i.AccountID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  owner, balance, currency 
) VALUES (
  $1, $2, $3
)
RETURNING account_id, owner, balance, currency, created_at
`

type CreateAccountParams struct {
	Owner    string `json:"owner"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Accounts, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Owner, arg.Balance, arg.Currency)
	var i Accounts
	err := row.Scan(
		&i.AccountID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE account_id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, accountID int64) error {
	_, err := q.db.Exec(ctx, deleteAccount, accountID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT account_id, owner, balance, currency, created_at FROM accounts 
WHERE account_id = $1
`

func (q *Queries) GetAccount(ctx context.Context, accountID int64) (Accounts, error) {
	row := q.db.QueryRow(ctx, getAccount, accountID)
	var i Accounts
	err := row.Scan(
		&i.AccountID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT account_id, owner, balance, currency, created_at FROM accounts 
WHERE account_id = $1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, accountID int64) (Accounts, error) {
	row := q.db.QueryRow(ctx, getAccountForUpdate, accountID)
	var i Accounts
	err := row.Scan(
		&i.AccountID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT account_id, owner, balance, currency, created_at FROM accounts 
ORDER BY account_id
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Accounts, error) {
	rows, err := q.db.Query(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Accounts
	for rows.Next() {
		var i Accounts
		if err := rows.Scan(
			&i.AccountID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts SET balance = $2
WHERE account_id = $1
RETURNING account_id, owner, balance, currency, created_at
`

type UpdateAccountParams struct {
	AccountID int64 `json:"account_id"`
	Balance   int64 `json:"balance"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Accounts, error) {
	row := q.db.QueryRow(ctx, updateAccount, arg.AccountID, arg.Balance)
	var i Accounts
	err := row.Scan(
		&i.AccountID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
